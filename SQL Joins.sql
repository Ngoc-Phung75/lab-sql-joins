## Challenge - Joining on multiple tables

-- Write SQL queries to perform the following tasks using the Sakila database:

-- 1. List the number of films per category.
SELECT category_id,
COUNT(film_id) AS number_of_films
FROM  film_category
GROUP BY category_id;


-- 2. Retrieve the store ID, city, and country for each store.
SELECT 
    s.store_id,
    c.city,
    co.country
FROM 
    store s
JOIN address a ON s.address_id = a.address_id
JOIN city c ON a.city_id = c.city_id
JOIN country co ON c.country_id = co.country_id;

-- 3.  Calculate the total revenue generated by each store in dollars.
SELECT 
    s.store_id,
    ROUND(SUM(p.amount), 2) AS total_revenue
FROM payment p
JOIN staff st ON p.staff_id = st.staff_id
JOIN store s ON st.store_id = s.store_id
GROUP BY s.store_id;

-- 4.  Determine the average running time of films for each category.
SELECT 
    c.name AS category,
    ROUND(AVG(f.length), 2) AS average_length
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name;


-- **Bonus**:
-- 5.  Identify the film categories with the longest average running time.
SELECT 
    c.name AS category,
    ROUND(AVG(f.length), 2) AS average_length
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY average_length DESC;

-- 6.  Display the top 10 most frequently rented movies in descending order.
SELECT 
    f.title,
    COUNT(r.rental_id) AS most_rented
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY most_rented DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT 
    f.title,
    s.store_id,
    COUNT(i.inventory_id) AS available_copies
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN store s ON i.store_id = s.store_id
WHERE 
    f.title = 'Academy Dinosaur'
    AND s.store_id = 1
GROUP BY f.title, s.store_id;


-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a `CASE` statement combined with `IFNULL`."

